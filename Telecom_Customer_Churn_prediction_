{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11016239,"sourceType":"datasetVersion","datasetId":6859126}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**<center> <span style=\"color:#0F52BA;font-family:serif; font-size:42px;\"> TELECOM CUSTOMER CHURN PREDICTION</span> </center>**","metadata":{}},{"cell_type":"markdown","source":"# <span style=\"font-family:serif; font-size:36px;\"> Content</span>\n\n1. [Loading Librarires & data](#1)\n2. [Understanding Data](#2)\n3. [Data visualization](#3)\n4. [Data PreProcessing](#4)\n5. [Machine Learning models evaluation and selection](#5)\n6. [Decile Analysis](#6)","metadata":{}},{"cell_type":"markdown","source":"<a id = 1> </a>\n\n<span style=\"font-family:serif; font-size:28px;\"> Loading Libraries & data</span>","metadata":{}},{"cell_type":"code","source":"#import required libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\nfrom sklearn.metrics import f1_score, accuracy_score, confusion_matrix,roc_curve, auc","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:47.901632Z","iopub.execute_input":"2025-03-13T08:18:47.902076Z","iopub.status.idle":"2025-03-13T08:18:47.908074Z","shell.execute_reply.started":"2025-03-13T08:18:47.902045Z","shell.execute_reply":"2025-03-13T08:18:47.906858Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/telecom-customer-churn/Telcom_Customer_Churn.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:47.909411Z","iopub.execute_input":"2025-03-13T08:18:47.909728Z","iopub.status.idle":"2025-03-13T08:18:47.959499Z","shell.execute_reply.started":"2025-03-13T08:18:47.909697Z","shell.execute_reply":"2025-03-13T08:18:47.958461Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<a id = 2> </a>\n\n# <span style=\"font-family:serif; font-size:28px;\"> Understanding data </span>","metadata":{}},{"cell_type":"code","source":"data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:47.961969Z","iopub.execute_input":"2025-03-13T08:18:47.962357Z","iopub.status.idle":"2025-03-13T08:18:47.9843Z","shell.execute_reply.started":"2025-03-13T08:18:47.962325Z","shell.execute_reply":"2025-03-13T08:18:47.98334Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:47.985823Z","iopub.execute_input":"2025-03-13T08:18:47.986214Z","iopub.status.idle":"2025-03-13T08:18:48.015908Z","shell.execute_reply.started":"2025-03-13T08:18:47.986177Z","shell.execute_reply":"2025-03-13T08:18:48.014579Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"#### Note:\n1. We have three numerical columns which are (SeniorCitzen, Tenure, MonthlyCharges)\n2. No Null values in any column","metadata":{}},{"cell_type":"code","source":"data.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:48.017223Z","iopub.execute_input":"2025-03-13T08:18:48.017544Z","iopub.status.idle":"2025-03-13T08:18:48.024202Z","shell.execute_reply.started":"2025-03-13T08:18:48.017508Z","shell.execute_reply":"2025-03-13T08:18:48.0232Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Data Columns description: \n  1. [Demographic data about Customer] :  Gender of citezen, It he has partner or dependents\n  2. [Service Type data] : Phone and Internet service type and security and if he has tech support\n  3. [Contract info] : Type and Valuen, and Payment method. \n  4. If He [churn] or not","metadata":{}},{"cell_type":"code","source":"data.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:48.025298Z","iopub.execute_input":"2025-03-13T08:18:48.025605Z","iopub.status.idle":"2025-03-13T08:18:48.054618Z","shell.execute_reply.started":"2025-03-13T08:18:48.02558Z","shell.execute_reply":"2025-03-13T08:18:48.053614Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<a id = 3> </a>\n\n# <span style=\"font-family:serif; font-size:28px;\"> Data visualization </span>","metadata":{}},{"cell_type":"markdown","source":"### We willl start by Categorical columns distribution","metadata":{}},{"cell_type":"code","source":"# Countplot with percentage\nplt.figure(figsize=(8, 5))\nax = sns.countplot(data=data, x='Churn', palette='coolwarm')\n\n# Get total count for percentage calculation\ntotal = len(data)\n\n# Annotate bars with count and percentage\nfor p in ax.patches:\n    count = p.get_height()  # Get height of each bar\n    percentage = f'{100 * count / total:.1f}%'  # Calculate percentage\n    ax.annotate(f'{count}\\n({percentage})', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# Titles and labels\nplt.title('Churn Distribution', fontsize=15, fontweight='bold')\nplt.xlabel('Churn', fontsize=12)\nplt.ylabel('Number of Customers', fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:48.05726Z","iopub.execute_input":"2025-03-13T08:18:48.057575Z","iopub.status.idle":"2025-03-13T08:18:48.240113Z","shell.execute_reply.started":"2025-03-13T08:18:48.05754Z","shell.execute_reply":"2025-03-13T08:18:48.238685Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Countplot with percentage\nplt.figure(figsize=(8, 5))\nax = sns.countplot(data=data, x='gender', palette='coolwarm', hue='Churn')\n\n# Get total count for percentage calculation\ntotal = len(data)\n\n# Annotate bars with count and percentage\nfor p in ax.patches:\n    count = p.get_height()  # Get height of each bar\n    percentage = f'{100 * count / total:.1f}%'  # Calculate percentage\n    ax.annotate(f'{count}\\n({percentage})', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# Titles and labels\nplt.title('Churn Distribution among Genders', fontsize=13, fontweight='bold', loc='center', pad=25)\nplt.xlabel('Gender', fontsize=12)\nplt.ylabel('Number of Customers', fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:48.241875Z","iopub.execute_input":"2025-03-13T08:18:48.242245Z","iopub.status.idle":"2025-03-13T08:18:48.463611Z","shell.execute_reply.started":"2025-03-13T08:18:48.242214Z","shell.execute_reply":"2025-03-13T08:18:48.462481Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"It shown no effect of the gender on the customer churn ","metadata":{}},{"cell_type":"code","source":"# Countplot with percentage\nplt.figure(figsize=(8, 5))\nax = sns.countplot(data=data, x='Partner', palette='coolwarm', hue='Churn')\n\n# Get total count for percentage calculation\ntotal = len(data)\n\n# Annotate bars with count and percentage\nfor p in ax.patches:\n    count = p.get_height()  # Get height of each bar\n    percentage = f'{100 * count / total:.1f}%'  # Calculate percentage\n    ax.annotate(f'{count}\\n({percentage})', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# Titles and labels\nplt.title('Churn Distribution', fontsize=13, fontweight='bold', loc='center')\nplt.xlabel('Partner', fontsize=12)\nplt.ylabel('Number of Customers', fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:48.464661Z","iopub.execute_input":"2025-03-13T08:18:48.464975Z","iopub.status.idle":"2025-03-13T08:18:48.694424Z","shell.execute_reply.started":"2025-03-13T08:18:48.464949Z","shell.execute_reply":"2025-03-13T08:18:48.693403Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Countplot with percentage\nplt.figure(figsize=(8, 5))\nax = sns.countplot(data=data, x='Dependents', palette='coolwarm', hue='Churn')\n\n# Get total count for percentage calculation\ntotal = len(data)\n\n# Annotate bars with count and percentage\nfor p in ax.patches:\n    count = p.get_height()  # Get height of each bar\n    percentage = f'{100 * count / total:.1f}%'  # Calculate percentage\n    ax.annotate(f'{count}\\n({percentage})', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# Titles and labels\nplt.title('Churn Distribution if the customer has dependents or not', fontsize=13, fontweight='bold', loc='center', pad=30)\nplt.xlabel('Dependents', fontsize=12)\nplt.ylabel('Number of Customers', fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:48.695413Z","iopub.execute_input":"2025-03-13T08:18:48.695783Z","iopub.status.idle":"2025-03-13T08:18:48.927871Z","shell.execute_reply.started":"2025-03-13T08:18:48.695734Z","shell.execute_reply":"2025-03-13T08:18:48.926861Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Customer who has not dependents more likely to churn than who has**","metadata":{}},{"cell_type":"code","source":"# Countplot with percentage\nplt.figure(figsize=(8, 5))\nax = sns.countplot(data=data, x='MultipleLines', palette='coolwarm', hue='Churn')\n\n# Get total count for percentage calculation\ntotal = len(data)\n\n# Annotate bars with count and percentage\nfor p in ax.patches:\n    count = p.get_height()  # Get height of each bar\n    percentage = f'{100 * count / total:.1f}%'  # Calculate percentage\n    ax.annotate(f'{count}\\n({percentage})', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# Titles and labels\nplt.title('Churn Distribution if the customer has Multiple Lines', fontsize=13, fontweight='bold', loc='center', pad=30)\nplt.xlabel('MultipleLines', fontsize=12)\nplt.ylabel('Number of Customers', fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:48.928546Z","iopub.execute_input":"2025-03-13T08:18:48.928816Z","iopub.status.idle":"2025-03-13T08:18:49.313103Z","shell.execute_reply.started":"2025-03-13T08:18:48.928793Z","shell.execute_reply":"2025-03-13T08:18:49.311888Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Countplot with percentage\nplt.figure(figsize=(8, 5))\nax = sns.countplot(data=data, x='InternetService', palette='coolwarm', hue='Churn')\n\n# Get total count for percentage calculation\ntotal = len(data)\n\n# Annotate bars with count and percentage\nfor p in ax.patches:\n    count = p.get_height()  # Get height of each bar\n    percentage = f'{100 * count / total:.1f}%'  # Calculate percentage\n    ax.annotate(f'{count}\\n({percentage})', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# Titles and labels\nplt.title('Churn Distribution among Different internet services', fontsize=13, fontweight='bold', loc='center', pad=30)\nplt.xlabel('Internet Services', fontsize=12)\nplt.ylabel('Number of Customers', fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:49.314197Z","iopub.execute_input":"2025-03-13T08:18:49.314518Z","iopub.status.idle":"2025-03-13T08:18:49.581162Z","shell.execute_reply.started":"2025-03-13T08:18:49.31449Z","shell.execute_reply":"2025-03-13T08:18:49.579978Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Customers with Fiber Optic internet service is more likely to churn**","metadata":{}},{"cell_type":"code","source":"data.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:49.582124Z","iopub.execute_input":"2025-03-13T08:18:49.582406Z","iopub.status.idle":"2025-03-13T08:18:49.588752Z","shell.execute_reply.started":"2025-03-13T08:18:49.582381Z","shell.execute_reply":"2025-03-13T08:18:49.587724Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Countplot with percentage\nplt.figure(figsize=(8, 5))\nax = sns.countplot(data=data, x='OnlineSecurity', palette='coolwarm', hue='Churn')\n\n# Get total count for percentage calculation\ntotal = len(data)\n\n# Annotate bars with count and percentage\nfor p in ax.patches:\n    count = p.get_height()  # Get height of each bar\n    percentage = f'{100 * count / total:.1f}%'  # Calculate percentage\n    ax.annotate(f'{count}\\n({percentage})', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# Titles and labels\nplt.title('Churn Distribution with Online Security', fontsize=13, fontweight='bold', loc='center', pad=30)\nplt.xlabel('Online Security', fontsize=12)\nplt.ylabel('Number of Customers', fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:49.589953Z","iopub.execute_input":"2025-03-13T08:18:49.590343Z","iopub.status.idle":"2025-03-13T08:18:49.858849Z","shell.execute_reply.started":"2025-03-13T08:18:49.590313Z","shell.execute_reply":"2025-03-13T08:18:49.857649Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Countplot with percentage\nplt.figure(figsize=(8, 5))\nax = sns.countplot(data=data, x='OnlineBackup', palette='coolwarm', hue='Churn')\n\n# Get total count for percentage calculation\ntotal = len(data)\n\n# Annotate bars with count and percentage\nfor p in ax.patches:\n    count = p.get_height()  # Get height of each bar\n    percentage = f'{100 * count / total:.1f}%'  # Calculate percentage\n    ax.annotate(f'{count}\\n({percentage})', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# Titles and labels\nplt.title('Churn Distribution with Online Backup', fontsize=13, fontweight='bold', loc='center', pad=30)\nplt.xlabel('Online Backup', fontsize=12)\nplt.ylabel('Number of Customers', fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:49.860148Z","iopub.execute_input":"2025-03-13T08:18:49.860529Z","iopub.status.idle":"2025-03-13T08:18:50.123735Z","shell.execute_reply.started":"2025-03-13T08:18:49.860487Z","shell.execute_reply":"2025-03-13T08:18:50.122704Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Countplot with percentage\nplt.figure(figsize=(8, 5))\nax = sns.countplot(data=data, x='DeviceProtection', palette='coolwarm', hue='Churn')\n\n# Get total count for percentage calculation\ntotal = len(data)\n\n# Annotate bars with count and percentage\nfor p in ax.patches:\n    count = p.get_height()  # Get height of each bar\n    percentage = f'{100 * count / total:.1f}%'  # Calculate percentage\n    ax.annotate(f'{count}\\n({percentage})', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# Titles and labels\nplt.title('Churn Distribution with Device Protection', fontsize=13, fontweight='bold', loc='center', pad=30)\nplt.xlabel('Device Protection', fontsize=12)\nplt.ylabel('Number of Customers', fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:50.124833Z","iopub.execute_input":"2025-03-13T08:18:50.125108Z","iopub.status.idle":"2025-03-13T08:18:50.380923Z","shell.execute_reply.started":"2025-03-13T08:18:50.125086Z","shell.execute_reply":"2025-03-13T08:18:50.379877Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### **Customers without Online Scurity, or online backup, or device protection is more likely to churn**","metadata":{}},{"cell_type":"code","source":"# Countplot with percentage\nplt.figure(figsize=(8, 5))\nax = sns.countplot(data=data, x='TechSupport', palette='coolwarm', hue='Churn')\n\n# Get total count for percentage calculation\ntotal = len(data)\n\n# Annotate bars with count and percentage\nfor p in ax.patches:\n    count = p.get_height()  # Get height of each bar\n    percentage = f'{100 * count / total:.1f}%'  # Calculate percentage\n    ax.annotate(f'{count}\\n({percentage})', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# Titles and labels\nplt.title('Churn Distribution with Technical Support', fontsize=13, fontweight='bold', loc='center', pad=30)\nplt.xlabel('Technical Support', fontsize=12)\nplt.ylabel('Number of Customers', fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:50.381847Z","iopub.execute_input":"2025-03-13T08:18:50.382204Z","iopub.status.idle":"2025-03-13T08:18:50.646288Z","shell.execute_reply.started":"2025-03-13T08:18:50.38217Z","shell.execute_reply":"2025-03-13T08:18:50.645332Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Countplot with percentage\nplt.figure(figsize=(8, 5))\nax = sns.countplot(data=data, x='Contract', palette='coolwarm', hue='Churn')\n\n# Get total count for percentage calculation\ntotal = len(data)\n\n# Annotate bars with count and percentage\nfor p in ax.patches:\n    count = p.get_height()  # Get height of each bar\n    percentage = f'{100 * count / total:.1f}%'  # Calculate percentage\n    ax.annotate(f'{count}\\n({percentage})', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# Titles and labels\nplt.title('Churn Distribution with Contract type', fontsize=13, fontweight='bold', loc='center', pad=30)\nplt.xlabel('Contract type', fontsize=12)\nplt.ylabel('Number of Customers', fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:50.64731Z","iopub.execute_input":"2025-03-13T08:18:50.647737Z","iopub.status.idle":"2025-03-13T08:18:50.889898Z","shell.execute_reply.started":"2025-03-13T08:18:50.647699Z","shell.execute_reply":"2025-03-13T08:18:50.888838Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Customer who subscripe month-to-month contract are more likely to churn than other**","metadata":{}},{"cell_type":"code","source":"# Countplot with percentage\nplt.figure(figsize=(8, 5))\nax = sns.countplot(data=data, x='PaymentMethod', palette='coolwarm', hue='Churn')\n\n# Get total count for percentage calculation\ntotal = len(data)\n\n# Annotate bars with count and percentage\nfor p in ax.patches:\n    count = p.get_height()  # Get height of each bar\n    percentage = f'{100 * count / total:.1f}%'  # Calculate percentage\n    ax.annotate(f'{count}\\n({percentage})', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# Titles and labels\nplt.title('Churn Distribution with Payment Method', fontsize=13, fontweight='bold', loc='center', pad=30)\nplt.xlabel('Payment Method', fontsize=12)\nplt.ylabel('Number of Customers', fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:50.894386Z","iopub.execute_input":"2025-03-13T08:18:50.894706Z","iopub.status.idle":"2025-03-13T08:18:51.164882Z","shell.execute_reply.started":"2025-03-13T08:18:50.894678Z","shell.execute_reply":"2025-03-13T08:18:51.163834Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Customers that have Electronic check before payment are more likely to churn that Automatic payment or mailed check**","metadata":{}},{"cell_type":"code","source":"# Countplot with percentage\nplt.figure(figsize=(8, 5))\nax = sns.countplot(data=data, x='PhoneService', palette='coolwarm')\n\n# Get total count for percentage calculation\ntotal = len(data)\n\n# Annotate bars with count and percentage\nfor p in ax.patches:\n    count = p.get_height()  # Get height of each bar\n    percentage = f'{100 * count / total:.1f}%'  # Calculate percentage\n    ax.annotate(f'{count}\\n({percentage})', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# Titles and labels\nplt.title('Distribution with Phone Service', fontsize=13, fontweight='bold', loc='center', pad=30)\nplt.xlabel('Phone Service', fontsize=12)\nplt.ylabel('Number of Customers', fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:51.167181Z","iopub.execute_input":"2025-03-13T08:18:51.167461Z","iopub.status.idle":"2025-03-13T08:18:51.348973Z","shell.execute_reply.started":"2025-03-13T08:18:51.167438Z","shell.execute_reply":"2025-03-13T08:18:51.347807Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Numerical Columns distribution density on Churn","metadata":{}},{"cell_type":"code","source":"sns.set_context(\"paper\",font_scale=1.1)\nax = sns.kdeplot(data.MonthlyCharges[(data[\"Churn\"] == 'No') ],\n                color=\"Red\", shade = True);\nax = sns.kdeplot(data.MonthlyCharges[(data[\"Churn\"] == 'Yes') ],\n                ax =ax, color=\"Blue\", shade= True);\nax.legend([\"Not Churn\",\"Churn\"],loc='upper right');\nax.set_ylabel('Density');\nax.set_xlabel('Monthly Charges');\nax.set_title('Distribution of monthly charges by churn');","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:51.350043Z","iopub.execute_input":"2025-03-13T08:18:51.350445Z","iopub.status.idle":"2025-03-13T08:18:51.690111Z","shell.execute_reply.started":"2025-03-13T08:18:51.350409Z","shell.execute_reply":"2025-03-13T08:18:51.688405Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"***Customer Who mde high monthly charges are more likely to churn than less***","metadata":{}},{"cell_type":"code","source":"sns.set_context(\"paper\",font_scale=1.1)\nax = sns.kdeplot(data.tenure[(data[\"Churn\"] == 'No') ],\n                color=\"Red\", shade = True);\nax = sns.kdeplot(data.tenure[(data[\"Churn\"] == 'Yes') ],\n                ax =ax, color=\"Blue\", shade= True);\nax.legend([\"Not Churn\",\"Churn\"],loc='upper right');\nax.set_ylabel('Density');\nax.set_xlabel('Tenure');\nax.set_title('Distribution of Tenure by churn');","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:51.691289Z","iopub.execute_input":"2025-03-13T08:18:51.691688Z","iopub.status.idle":"2025-03-13T08:18:52.020059Z","shell.execute_reply.started":"2025-03-13T08:18:51.691649Z","shell.execute_reply":"2025-03-13T08:18:52.018831Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"***Customers who have less tenure are more likely to churn than others***","metadata":{}},{"cell_type":"code","source":"data.SeniorCitizen.unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:52.021258Z","iopub.execute_input":"2025-03-13T08:18:52.021674Z","iopub.status.idle":"2025-03-13T08:18:52.027989Z","shell.execute_reply.started":"2025-03-13T08:18:52.021642Z","shell.execute_reply":"2025-03-13T08:18:52.027075Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"binary values in Senior Citxen, so we will deal with it as categorical column","metadata":{}},{"cell_type":"code","source":"# Countplot with percentage\nplt.figure(figsize=(8, 5))\nax = sns.countplot(data=data, x='SeniorCitizen', palette='coolwarm', hue='Churn')\n\n# Get total count for percentage calculation\ntotal = len(data)\n\n# Annotate bars with count and percentage\nfor p in ax.patches:\n    count = p.get_height()  # Get height of each bar\n    percentage = f'{100 * count / total:.1f}%'  # Calculate percentage\n    ax.annotate(f'{count}\\n({percentage})', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# Titles and labels\nplt.title('Churn Distribution of Senior Citizen or not ', fontsize=13, fontweight='bold', loc='center', pad=30)\nplt.xlabel('Senior Citizen', fontsize=12)\nplt.ylabel('Number of Customers', fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:52.028934Z","iopub.execute_input":"2025-03-13T08:18:52.029308Z","iopub.status.idle":"2025-03-13T08:18:52.252005Z","shell.execute_reply.started":"2025-03-13T08:18:52.029272Z","shell.execute_reply":"2025-03-13T08:18:52.250851Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Findings: \n\n1. ***Demographically***: Customers without Dependents are more likely to churn, Gender & Partner has no significant effect.\n2. ***Service***: Customers with Fiber Optic internet service is more likely to churn than others, Phone service has no significant effect.\n3. ***Security & Support***: Customers Who has not Online security or backup are more like to churn as well as Technical support. \n4. ***Contract Type***: \"Month-to-Month\" are the most common contract their customers churn, As well as Customers who get electronic check before payments are more likely to churn than other.\n5. Customers who pay ***high charges monhtly*** are more likely to churn than others. \n6. Customers who has ***less tenure*** are more like to churn too.","metadata":{}},{"cell_type":"markdown","source":"<a id=4> </a>\n\n# <span style=\"font-family:serif; font-size:28px;\"> Data Preprocessing </span>","metadata":{}},{"cell_type":"code","source":"data.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:52.253229Z","iopub.execute_input":"2025-03-13T08:18:52.253586Z","iopub.status.idle":"2025-03-13T08:18:52.260563Z","shell.execute_reply.started":"2025-03-13T08:18:52.253556Z","shell.execute_reply":"2025-03-13T08:18:52.259477Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data_cleaned = data.drop(labels='customerID', axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:52.261831Z","iopub.execute_input":"2025-03-13T08:18:52.262174Z","iopub.status.idle":"2025-03-13T08:18:52.279172Z","shell.execute_reply.started":"2025-03-13T08:18:52.262147Z","shell.execute_reply":"2025-03-13T08:18:52.27799Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Categorical Columns","metadata":{}},{"cell_type":"code","source":"# Change option 0 for No or no phone service and 1 for Yes in these four columns (OnlineSecurity, OnlineBackup, DeviceProtection, TechSupport)\ndata_cleaned['OnlineSecurity - No'] = 0\ndata_cleaned.loc[data_cleaned.OnlineSecurity == \"Yes\" , 'OnlineSecurity - No' ] = 1\n\ndata_cleaned['OnlineBackup - No'] = 0\ndata_cleaned.loc[data_cleaned.OnlineBackup == \"Yes\" , 'OnlineBackup - No' ] = 1\n\ndata_cleaned['DeviceProtection - No'] = 0\ndata_cleaned.loc[data_cleaned.DeviceProtection == \"Yes\" , 'DeviceProtection - No' ] = 1\n\ndata_cleaned['TechSupport - No'] = 0\ndata_cleaned.loc[data_cleaned.TechSupport == \"Yes\" , 'TechSupport - No' ] = 1","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:52.280216Z","iopub.execute_input":"2025-03-13T08:18:52.280622Z","iopub.status.idle":"2025-03-13T08:18:52.298242Z","shell.execute_reply.started":"2025-03-13T08:18:52.280574Z","shell.execute_reply":"2025-03-13T08:18:52.2972Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Make a column to differentiate Fiber optic from Internet services to be 1 for \"Fiber optic\" and 0. \ndata_cleaned['InternetService - fiber optic'] = 0\ndata_cleaned.loc[data_cleaned.InternetService == 'Fiber optic' , 'InternetService - fiber optic' ] = 1\n\n#Make the Contract Month-To-Month column with zero and 1.\ndata_cleaned['Contract - monthTomonth'] = 0\ndata_cleaned.loc[data_cleaned.Contract == 'Month-to-month' , 'Contract - monthTomonth' ] = 1\n\n# Make the Electronic check before payment a column itself with zero and 1 \ndata_cleaned['PaymentMethod - Electronic check'] = 0\ndata_cleaned.loc[data_cleaned.PaymentMethod == 'Electronic check' , 'PaymentMethod - Electronic check' ] = 1","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:52.299383Z","iopub.execute_input":"2025-03-13T08:18:52.29973Z","iopub.status.idle":"2025-03-13T08:18:52.318633Z","shell.execute_reply.started":"2025-03-13T08:18:52.2997Z","shell.execute_reply":"2025-03-13T08:18:52.317467Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Change Yes and No in Dependents, and Churn columns to be 0 and 1. \ndata_cleaned.loc[data_cleaned.Dependents == 'No' , 'Dependents' ] = 0\ndata_cleaned.loc[data_cleaned.Dependents == 'Yes' , 'Dependents' ] = 1\n\ndata_cleaned.loc[data_cleaned.Churn == 'No' , 'Churn' ] = 0\ndata_cleaned.loc[data_cleaned.Churn == 'Yes' , 'Churn' ] = 1","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:52.319963Z","iopub.execute_input":"2025-03-13T08:18:52.320437Z","iopub.status.idle":"2025-03-13T08:18:52.342466Z","shell.execute_reply.started":"2025-03-13T08:18:52.320402Z","shell.execute_reply":"2025-03-13T08:18:52.341268Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Convert data type of these two columns to be integer.\ndata_cleaned.Churn=data_cleaned.Churn.astype(int)\ndata_cleaned.Dependents=data_cleaned.Dependents.astype(int)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:52.343582Z","iopub.execute_input":"2025-03-13T08:18:52.343976Z","iopub.status.idle":"2025-03-13T08:18:52.36145Z","shell.execute_reply.started":"2025-03-13T08:18:52.343923Z","shell.execute_reply":"2025-03-13T08:18:52.360332Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Based on the data , values of MonthlyCharges and Tenure columns are away from the rest of columns , so i need to Scale it \n\ncolumns_to_scale = ['MonthlyCharges', 'tenure']\n\nscaler= StandardScaler()\ndata_cleaned[columns_to_scale] = scaler.fit_transform(data_cleaned[columns_to_scale])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:52.362417Z","iopub.execute_input":"2025-03-13T08:18:52.362714Z","iopub.status.idle":"2025-03-13T08:18:52.384095Z","shell.execute_reply.started":"2025-03-13T08:18:52.362688Z","shell.execute_reply":"2025-03-13T08:18:52.383021Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# What is the correlation matrix of Churn with other columns\n\ndata_cleaned.select_dtypes(include=['number']).corr()['Churn']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:52.385171Z","iopub.execute_input":"2025-03-13T08:18:52.385703Z","iopub.status.idle":"2025-03-13T08:18:52.406105Z","shell.execute_reply.started":"2025-03-13T08:18:52.385664Z","shell.execute_reply":"2025-03-13T08:18:52.405101Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### The more correlated columns to churn are \n* 'InternetService - fiber optic' with 0.3\n* 'Contract - monthTomonth' with 0.4\n* 'PaymentMethod - Electronic check' eith 0.3\n* 'tenure' with -0.35","metadata":{}},{"cell_type":"markdown","source":"### Splitting the data to X and Y then to train and test","metadata":{}},{"cell_type":"code","source":"x= data_cleaned[['InternetService - fiber optic', \n                 'Contract - monthTomonth',\n                 'PaymentMethod - Electronic check', \n                 'tenure']]\n\ny = data_cleaned['Churn']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:52.407292Z","iopub.execute_input":"2025-03-13T08:18:52.407586Z","iopub.status.idle":"2025-03-13T08:18:52.414244Z","shell.execute_reply.started":"2025-03-13T08:18:52.40756Z","shell.execute_reply":"2025-03-13T08:18:52.412929Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Split the data \n\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:52.415496Z","iopub.execute_input":"2025-03-13T08:18:52.415914Z","iopub.status.idle":"2025-03-13T08:18:52.435434Z","shell.execute_reply.started":"2025-03-13T08:18:52.415878Z","shell.execute_reply":"2025-03-13T08:18:52.434385Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:52.436498Z","iopub.execute_input":"2025-03-13T08:18:52.436886Z","iopub.status.idle":"2025-03-13T08:18:52.445753Z","shell.execute_reply.started":"2025-03-13T08:18:52.436846Z","shell.execute_reply":"2025-03-13T08:18:52.444674Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<a id=5> </a>\n\n# <span style=\"font-family:serif; font-size:28px;\"> Machine Learning models  </span>","metadata":{}},{"cell_type":"markdown","source":"### Random Forest","metadata":{}},{"cell_type":"code","source":"RF = RandomForestClassifier(random_state=42)\nRF.fit(X_train, y_train)","metadata":{"scrolled":true,"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:52.446822Z","iopub.execute_input":"2025-03-13T08:18:52.447253Z","iopub.status.idle":"2025-03-13T08:18:52.852454Z","shell.execute_reply.started":"2025-03-13T08:18:52.447217Z","shell.execute_reply":"2025-03-13T08:18:52.851469Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"predictions = RF.predict_proba(X_test)\ny_pred = (predictions[:,1] > 0.5).astype(int)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:52.85346Z","iopub.execute_input":"2025-03-13T08:18:52.853736Z","iopub.status.idle":"2025-03-13T08:18:52.889626Z","shell.execute_reply.started":"2025-03-13T08:18:52.853712Z","shell.execute_reply":"2025-03-13T08:18:52.888326Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print('Classification Report:\\n', classification_report(y_test, y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:52.890604Z","iopub.execute_input":"2025-03-13T08:18:52.890966Z","iopub.status.idle":"2025-03-13T08:18:52.906665Z","shell.execute_reply.started":"2025-03-13T08:18:52.890927Z","shell.execute_reply":"2025-03-13T08:18:52.90553Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Confusion Matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\nsns.heatmap(conf_matrix, annot=True, fmt='d',cmap = 'Greens')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title('Random Forrest Confusion Matrix')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:52.907756Z","iopub.execute_input":"2025-03-13T08:18:52.908089Z","iopub.status.idle":"2025-03-13T08:18:53.14018Z","shell.execute_reply.started":"2025-03-13T08:18:52.908058Z","shell.execute_reply":"2025-03-13T08:18:53.139139Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### XGBoost","metadata":{}},{"cell_type":"code","source":"xgb = XGBClassifier(scale_pos_weight=2)\nxgb.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:53.141289Z","iopub.execute_input":"2025-03-13T08:18:53.141576Z","iopub.status.idle":"2025-03-13T08:18:53.270019Z","shell.execute_reply.started":"2025-03-13T08:18:53.141551Z","shell.execute_reply":"2025-03-13T08:18:53.269062Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"predictions_xg = xgb.predict_proba(X_test)\ny_pred_xg = (predictions_xg[:,1] > 0.5).astype(int)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:53.270943Z","iopub.execute_input":"2025-03-13T08:18:53.27121Z","iopub.status.idle":"2025-03-13T08:18:53.282063Z","shell.execute_reply.started":"2025-03-13T08:18:53.271189Z","shell.execute_reply":"2025-03-13T08:18:53.281152Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print('Classification Report:\\n', classification_report(y_test, y_pred_xg))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:53.28297Z","iopub.execute_input":"2025-03-13T08:18:53.28343Z","iopub.status.idle":"2025-03-13T08:18:53.307802Z","shell.execute_reply.started":"2025-03-13T08:18:53.283403Z","shell.execute_reply":"2025-03-13T08:18:53.306887Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Confusion Matrix\nconf_matrix = confusion_matrix(y_test, y_pred_xg)\nsns.heatmap(conf_matrix, annot=True, fmt='d',cmap = 'Greens')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title('XGBOOST Confusion Matrix')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:53.309079Z","iopub.execute_input":"2025-03-13T08:18:53.309438Z","iopub.status.idle":"2025-03-13T08:18:53.525401Z","shell.execute_reply.started":"2025-03-13T08:18:53.309411Z","shell.execute_reply":"2025-03-13T08:18:53.524276Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Logistic Regression","metadata":{}},{"cell_type":"code","source":"LG = LogisticRegression()\nLG.fit(X_train, y_train)\n\n\npredictions_lg = LG.predict_proba(X_test)\ny_pred_lg = (predictions_lg[:,1] > 0.5).astype(int)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:53.526699Z","iopub.execute_input":"2025-03-13T08:18:53.527032Z","iopub.status.idle":"2025-03-13T08:18:53.551651Z","shell.execute_reply.started":"2025-03-13T08:18:53.527005Z","shell.execute_reply":"2025-03-13T08:18:53.55069Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print('Classification Report:\\n', classification_report(y_test, y_pred_lg))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:53.55251Z","iopub.execute_input":"2025-03-13T08:18:53.5528Z","iopub.status.idle":"2025-03-13T08:18:53.568072Z","shell.execute_reply.started":"2025-03-13T08:18:53.552753Z","shell.execute_reply":"2025-03-13T08:18:53.567057Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Confusion Matrix\nconf_matrix = confusion_matrix(y_test, y_pred_lg)\nsns.heatmap(conf_matrix, annot=True, fmt='d',cmap = 'Greens')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title('Logistic Regression Confusion Matrix')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:53.569082Z","iopub.execute_input":"2025-03-13T08:18:53.569653Z","iopub.status.idle":"2025-03-13T08:18:53.787452Z","shell.execute_reply.started":"2025-03-13T08:18:53.569615Z","shell.execute_reply":"2025-03-13T08:18:53.786454Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<span style=\"font-family:serif; font-size:20px;\"> I am searching for high recall with not bad precision  </span>\n* **Random Forest model** give me:\n    * Recall: 55%\n    * Precision: 61%\n    * F1 score: 58%\n    * Accuracy: 79%\n* **XGBoost model** give me:\n    * Recall: 74%\n    * Precision: 56%\n    * F1 score: 64%\n    * Accuracy: 78%\n* **Logistic Regression model** give me:\n    * Recall: 53%\n    * Precision: 67%\n    * F1 score: 60%\n    * Accuracy: 81%\n    \n   \n**I Choose XGBoost model to be my model with good accuracy 78% and acceptable recall 74% without changing the percentage in predict proba to less than 0.5.**","metadata":{}},{"cell_type":"code","source":"# Feature Importance\nimportances = xgb.feature_importances_\nfeature_names = x.columns\n\n# Sort feature importances in descending order\nsorted_indices = np.argsort(importances)[::-1]\nsorted_importances = importances[sorted_indices]\nsorted_feature_names = feature_names[sorted_indices]\n\nplt.figure(figsize=(10, 5))\nsns.barplot(x=sorted_importances, y=sorted_feature_names)\nplt.xlabel('Importance')\nplt.ylabel('Feature')\nplt.title('Feature Importance')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:53.788577Z","iopub.execute_input":"2025-03-13T08:18:53.788914Z","iopub.status.idle":"2025-03-13T08:18:53.97554Z","shell.execute_reply.started":"2025-03-13T08:18:53.788878Z","shell.execute_reply":"2025-03-13T08:18:53.974367Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"*It shows that XGBoost model has features more important than others like \"Contract - MonthToMonth\"*","metadata":{}},{"cell_type":"markdown","source":"<a id = 6> </a>\n\n# <span style=\"font-family:serif; font-size:28px;\"> Decile Analysis </span>","metadata":{}},{"cell_type":"code","source":"probabilities = xgb.predict_proba(X_test)[:,-1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:53.976589Z","iopub.execute_input":"2025-03-13T08:18:53.976944Z","iopub.status.idle":"2025-03-13T08:18:53.986982Z","shell.execute_reply.started":"2025-03-13T08:18:53.976913Z","shell.execute_reply":"2025-03-13T08:18:53.986064Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model_output = pd.DataFrame({\n    'Model_probabilities' : probabilities\n    ,'Actuals' : y_test\n})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:53.987641Z","iopub.execute_input":"2025-03-13T08:18:53.987924Z","iopub.status.idle":"2025-03-13T08:18:53.998111Z","shell.execute_reply.started":"2025-03-13T08:18:53.987899Z","shell.execute_reply":"2025-03-13T08:18:53.997074Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model_output = model_output.sort_values(by='Model_probabilities', ascending=False).reset_index().drop(columns='index')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:53.999111Z","iopub.execute_input":"2025-03-13T08:18:53.999501Z","iopub.status.idle":"2025-03-13T08:18:54.016904Z","shell.execute_reply.started":"2025-03-13T08:18:53.999471Z","shell.execute_reply":"2025-03-13T08:18:54.01558Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model_output[\"decile\"] = pd.qcut(model_output.index, 10, labels=False, duplicates=\"drop\") + 1\n\nmodel_output","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:54.018234Z","iopub.execute_input":"2025-03-13T08:18:54.018667Z","iopub.status.idle":"2025-03-13T08:18:54.042648Z","shell.execute_reply.started":"2025-03-13T08:18:54.018631Z","shell.execute_reply":"2025-03-13T08:18:54.041341Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"result = model_output.groupby('decile').agg({\"Actuals\" : ['sum', 'count']}).reset_index().droplevel(1,axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:54.043734Z","iopub.execute_input":"2025-03-13T08:18:54.044161Z","iopub.status.idle":"2025-03-13T08:18:54.05827Z","shell.execute_reply.started":"2025-03-13T08:18:54.044124Z","shell.execute_reply":"2025-03-13T08:18:54.057106Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"result.columns = ['Decile', 'True Positives', 'All customers']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:54.059309Z","iopub.execute_input":"2025-03-13T08:18:54.059574Z","iopub.status.idle":"2025-03-13T08:18:54.075348Z","shell.execute_reply.started":"2025-03-13T08:18:54.059552Z","shell.execute_reply":"2025-03-13T08:18:54.074041Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"result['recall_per_decile'] = result['True Positives'] / result['True Positives'].sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:54.076505Z","iopub.execute_input":"2025-03-13T08:18:54.076822Z","iopub.status.idle":"2025-03-13T08:18:54.095058Z","shell.execute_reply.started":"2025-03-13T08:18:54.076786Z","shell.execute_reply":"2025-03-13T08:18:54.093874Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# cumulative recall \nresult['True_positives_cumulative'] = result['True Positives'].cumsum()\n\nresult['recall_cumulaitve'] = result['True_positives_cumulative'] / result['True Positives'].sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:54.100973Z","iopub.execute_input":"2025-03-13T08:18:54.1013Z","iopub.status.idle":"2025-03-13T08:18:54.116461Z","shell.execute_reply.started":"2025-03-13T08:18:54.101273Z","shell.execute_reply":"2025-03-13T08:18:54.11513Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"result","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:54.117717Z","iopub.execute_input":"2025-03-13T08:18:54.118034Z","iopub.status.idle":"2025-03-13T08:18:54.13874Z","shell.execute_reply.started":"2025-03-13T08:18:54.118008Z","shell.execute_reply":"2025-03-13T08:18:54.13778Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Sample Line Plot\nsns.lineplot(data=result, x='Decile', y='recall_cumulaitve', marker='o')\n\n# Ensure all deciles are shown\nplt.xticks(result['Decile'])  # Set all decile labels\n\n# Add data labels to each point\nfor x, y in zip(result['Decile'], result['recall_cumulaitve']):\n    plt.text(x, y, f'{y:.2f}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Show Plot\nplt.xlabel(\"Decile\")\nplt.ylabel(\"Cumulative Recall\")\nplt.title(\"Decile vs Cumulative Recall\")\nplt.grid(True)\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-13T08:18:54.13981Z","iopub.execute_input":"2025-03-13T08:18:54.140136Z","iopub.status.idle":"2025-03-13T08:18:54.565604Z","shell.execute_reply.started":"2025-03-13T08:18:54.140111Z","shell.execute_reply":"2025-03-13T08:18:54.564558Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**I recommend That we can focus on the first Five deciles as after that fifth decile the increase in the recall is very small.**","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}